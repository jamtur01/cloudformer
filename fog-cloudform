#!/usr/bin/env ruby
require 'optparse'
require 'rubygems'
require 'fog'

options = {}
parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} -n STACK_NAME -t TEMPLATE_FILE [options]"

  options[:name] = nil
  opts.on('-n', '--name NAME', 'Required name attribute') do |name|
    options[:name] = name
  end

  options[:parameters] = {}
  opts.on('-p', '--parameters KEY=VALUE', 'Set the parameters for a stack template', 
    '(can be comma separated key value pairs)') do |params|
    params.split(',').each do |param|
      k,v = param.split('=')
      raise "Invalid parameter definition" unless v
      options[:parameters][k] = v
    end
  end

  options[:template] = 'elasticBICF.template'
  opts.on('-t', '--template FILE', 'Set the template file for this stack') do |file|
    options[:template] = file
  end
end

parser.parse!
[:name, :template].each do |p|
  raise "Missing required parameter: --#{p}" unless options[p]
end

template_body = ''
File.open(options[:template]) {|f| template_body << f.read}

cf = Fog::AWS::CloudFormation.new(
  :aws_access_key_id => ENV['AWS_ACCESS_KEY'],
  :aws_secret_access_key => ENV['AWS_SECRET_KEY']
)

def aws_params(hash)
  r = Hash.new
  c = 1
  hash.each do |k,v|
    r["Parameters.member.#{c}.ParameterKey"] = k
    r["Parameters.member.#{c}.ParameterValue"] = v
    c += 1
  end
  r
end
puts "Connecting to AWS CloudFormation..."
cf.create_stack(options[:name], {'TemplateBody' => template_body}.merge!(aws_params(options[:parameters])))

puts "Starting up stack #{options[:name]}"
while cf.describe_stack_events(options[:name]).body["StackEvents"][0]["ResourceStatus"] == "CREATE_IN_PROGRESS"
  print '.'
  sleep(2)
end
puts " Stack #{options[:name]} created."

sleep(5) until cf.describe_stacks('StackName' => options[:name]).body["Stacks"][0]["Outputs"][0] != []

begin
  ip = cf.describe_stacks('StackName' => options[:name]).body["Stacks"][0]["Outputs"][0]["OutputValue"]
  puts "The Public IP address of the stack is #{ip}."
rescue Exception
  puts "Check the AWS CloudFormation Console for the Public IP address."
end
